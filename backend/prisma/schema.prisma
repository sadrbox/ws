// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  uuid       String  @unique @default(uuid())
  username   String?
  password   String?
  email      String?
  firstname  String?
  lastname   String?
  middlename String?
  fullname   String?
}

model Organization {
  id                Int               @id @default(autoincrement())
  uuid              String            @unique @default(uuid())
  shortName         String?
  displayName       String?
  bin               String            @unique @db.VarChar(12)
  contracts         Contract[]
  contacts          Contact[]
  activityHistories ActivityHistory[]
}

model Counterparty {
  id          Int        @id @default(autoincrement())
  uuid        String     @unique @default(uuid())
  shortName   String?
  displayName String?
  bin         String     @unique @db.VarChar(12)
  contracts   Contract[]
  contacts    Contact[]
}

model Contract {
  id               Int           @id @default(autoincrement())
  uuid             String        @unique @default(uuid())
  shortName        String
  contractNumber   String?
  contractText     String?       @db.Text
  startDate        DateTime?
  endDate          DateTime?
  organizationUuid String?
  counterpartyUuid String?
  Organization     Organization? @relation(fields: [organizationUuid], references: [uuid], onDelete: Cascade)
  Counterparty     Counterparty? @relation(fields: [counterpartyUuid], references: [uuid], onDelete: Cascade)
}

model Contact {
  id               Int           @id @default(autoincrement())
  uuid             String        @unique @default(uuid())
  value            String
  contactTypes     ContactType   @relation(fields: [contactTypeUuid], references: [uuid], onDelete: Cascade)
  contactTypeUuid  String
  ownerId          String
  ownerType        String
  organizationUuid String?
  counterpartyUuid String?
  Organization     Organization? @relation(fields: [organizationUuid], references: [uuid], onDelete: Cascade)
  Counterparty     Counterparty? @relation(fields: [counterpartyUuid], references: [uuid], onDelete: Cascade)
}

model ContactType {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(uuid())
  shortName String
  contacts  Contact[]
}

model ActivityHistory {
  id                    Int          @id @default(autoincrement())
  uuid                  String       @unique @default(uuid())
  actionDate            DateTime     @default(now())
  actionType            String
  organization          Organization @relation(fields: [organizationUuid], references: [uuid], onDelete: Cascade)
  organizationUuid      String
  organizationShortName String
  bin                   String
  userName              String
  host                  String
  ip                    String?
  city                  String?
  objectId              String
  objectType            String
  objectName            String
  props                 Json
}
